package br.com.furb.compiler.lexical.impl.gals;

public interface ParserConstants
{
    int START_SYMBOL = 43;

    int FIRST_NON_TERMINAL    = 43;
    int FIRST_SEMANTIC_ACTION = 80;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  4, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6,  6,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  8, -1,  8,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, 10, 11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 15, -1, -1, 16, -1, -1, 15, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 18, 18, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 19, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, 22, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 22, 22, 22, 22, 22, -1, 22, -1, -1, -1, -1, -1, -1, 22, -1, -1, 22, -1 },
        { -1, 23, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 29, 29, 29, -1, -1, -1, -1, -1, 29, 29, 28, -1, -1, -1, -1, -1, 29, -1, 29 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 31, 31, 31, -1, -1, -1, -1, -1, 31, 31, -1, 30, -1, -1, -1, -1, 31, -1, 31 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 33, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, 37, 37, -1, -1, -1, -1, -1, 38, 35, -1, -1, -1, -1, -1, -1, 36, -1, 39 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, -1, -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1, 40, -1, 40 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, 41, 41, 41, -1, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, -1, 41, -1, 41 },
        { -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, 43, 43, 43, 43, 43, -1, 43, -1, -1, -1, -1, -1, -1, 43, -1, -1, 43, -1 },
        { -1, 46, -1, 46, -1, 46, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, 47, 47, 47, 47, -1, 49, -1, -1, -1, -1, -1, -1, 50, -1, -1, 48, -1 },
        { -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 53, -1, 53, -1, 53, -1, 53, -1, -1, -1, -1, -1, -1, -1, 52, 52, 52, 52, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 55, 56, 57, 58, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 60, 60, 60, 60, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 63, -1, 63, -1, 63, -1, 63, -1, -1, 61, 62, -1, -1, -1, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, 64, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, 64, 64, 64, 64, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 67, -1, 67, -1, 67, -1, 67, -1, -1, 67, 67, 65, 66, -1, 67, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, 73, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 69, 70, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 75, -1, 75, 76, 75, -1, 75, -1, -1, 75, 75, 75, 75, -1, 75, 75, 75, 75, 75, 75, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 36, 37, 44,  9, 66, 10 },
        {  3, 45,  4 },
        {  0 },
        { 47, 46 },
        {  2, 45 },
        {  0 },
        { 49, 48 },
        {  5, 27,  6 },
        {  0 },
        { 23 },
        { 24 },
        { 25 },
        { 26 },
        { 51, 15, 68,  4 },
        { 49, 52 },
        {  0 },
        {  5, 68,  6 },
        { 33,  7, 54,  8,  4 },
        { 51, 55 },
        {  2, 54 },
        {  0 },
        { 40,  7, 57,  8,  4 },
        { 68, 58 },
        {  2, 57 },
        {  0 },
        { 32,  7, 68,  8, 60 },
        { 34,  3,  9, 66, 10, 62 },
        { 35,  3,  9, 66, 10, 61 },
        { 34,  3,  9, 66, 10 },
        {  0 },
        { 35,  3,  9, 66, 10 },
        {  0 },
        { 42,  7, 68,  8, 64 },
        { 35,  3,  9, 66, 10 },
        { 34,  3,  9, 66, 10 },
        { 53 },
        { 56 },
        { 50 },
        { 59 },
        { 63 },
        { 65, 67 },
        { 66 },
        {  0 },
        { 70, 69 },
        { 30, 70, 69 },
        { 39, 70, 69 },
        {  0 },
        { 71 },
        { 41 },
        { 31 },
        { 38, 70 },
        { 74, 72 },
        { 73, 74 },
        {  0 },
        { 16 },
        { 17 },
        { 18 },
        { 19 },
        { 20 },
        { 21 },
        { 76, 75 },
        { 11, 76, 75 },
        { 12, 76, 75 },
        {  0 },
        { 78, 77 },
        { 13, 78, 77 },
        { 14, 78, 77 },
        {  0 },
        { 49, 79 },
        { 27 },
        { 28 },
        { 29 },
        {  7, 68,  8 },
        { 11, 78 },
        { 12, 78 },
        {  0 },
        {  5, 68,  6 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado fim de programa", // "Era esperado fim de programa",
        "esperado ,", // "Era esperado \",\"",
        "esperado :", // "Era esperado \":\"",
        "esperado ;", // "Era esperado \";\"",
        "esperado [", // "Era esperado \"[\"",
        "esperado ]", // "Era esperado \"]\"",
        "esperado (", // "Era esperado \"(\"",
        "esperado )", // "Era esperado \")\"",
        "esperado {", // "Era esperado \"{\"",
        "esperado }", // "Era esperado \"}\"",
        "esperado +", // "Era esperado \"+\"",
        "esperado -", // "Era esperado \"-\"",
        "esperado *", // "Era esperado \"*\"",
        "esperado /", // "Era esperado \"/\"",
        "esperado <-", // "Era esperado \"<-\"",
        "esperado =", // "Era esperado \"=\"",
        "esperado !=", // "Era esperado \"!=\"",
        "esperado <", // "Era esperado \"<\"",
        "esperado <=", // "Era esperado \"<=\"",
        "esperado >", // "Era esperado \">\"",
        "esperado >=", // "Era esperado \">=\"",
        "esperado palavra reservada", // "Era esperado palavra_reservada",
        "esperado identificador", // "Era esperado identificador_de_int",
        "esperado identificador", // "Era esperado identificador_de_float",
        "esperado identificador", // "Era esperado identificador_de_string",
        "esperado identificador", // "Era esperado identificador_de_bool",
        "esperado constante int", // "Era esperado constante_int",
        "esperado constante float", // "Era esperado constante_float",
        "esperado constante string", // "Era esperado constante_string",
        "esperado and", // "Era esperado and",
        "esperado false", // "Era esperado false",
        "esperado if", // "Era esperado if",
        "esperado in", // "Era esperado in",
        "esperado isFalseDo", // "Era esperado isFalseDo",
        "esperado isTrueDo", // "Era esperado isTrueDo",
        "esperado main", // "Era esperado main",
        "esperado module", // "Era esperado module",
        "esperado not", // "Era esperado not",
        "esperado or", // "Era esperado or",
        "esperado out", // "Era esperado out",
        "esperado true", // "Era esperado true",
        "esperado while", // "Era esperado while",
        "esperado main", // "<programa> inválido",
        "esperado : {", // "<variaveis> inválido",
        "esperado identificador", // "<lista_de_variaveis> inválido",
        "esperado , ;", // "<lista_de_variaveis2> inválido",
        "esperado identificador", // "<identificador> inválido",
        "esperado , ; [", //"<identificador2> inválido",
        "esperado identificador", // "<tipos_de_identificador> inválido",
        "esperado identificador", // "<atribuicao> inválido",
        "esperado identificador", // "<identificador_para_expressao> inválido",
        "esperado , [ ) <-", // "<identificador_para_expressao2> inválido",
        "esperado in ", // "<entrada_de_dados> inválido",
        "esperado identificador", // "<lista_de_identificadores> inválido",
        "esperado , )", // "<lista_de_identificadores2> inválido",
        "esperado out", // "<saida_de_dados> inválido",
        "esperada expressão", // "<lista_de_expressoes> inválido",
        "esperado , )", // "<lista_de_expressoes2> inválido",
        "esperado if", // "<comando_de_selecao> inválido",
        "esperado isFalseDo isTrueDo", // "<comando_de_selecao2> inválido",
        "esperado } comando isFalseDo", // "<fluxo_false_do> inválido",
        "esperado } comando isTrueDo", // "<fluxo_true_do> inválido",
        "esperado while", // "<comando_de_repeticao> inválido",
        "esperado isFalseDo isTrueDo", // "<comando_de_repeticao2> inválido",
        "esperado comando", // "<comando> inválido",
        "esperado comando", // "<lista_de_comandos> inválido",
        "esperado } comando", // "<lista_de_comandos2> inválido",
        "esperada expressão", // "<expressao> inválido",
        "esperada expressão", // "<expressao2> inválido",
        "esperada expressão", // "<elemento> inválido",
        "esperada expressão", // "<relacional> inválido",
        "esperada expressão", // "<relacional2> inválido",
        "esperada expressão", // "<operador_relacional> inválido",
        "esperada expressão", // "<aritmetica> inválido",
        "esperada expressão", // "<aritmetica2> inválido",
        "esperada expressão", // "<termo> inválido",
        "esperada expressão", // "<termo2> inválido",
        "esperada expressão", // "<fator> inválido",
        "esperada , ; [ ] ) operador binário (aritmético, lógico, relacional)" // "<vetor_uso> inválido"
    };
}
